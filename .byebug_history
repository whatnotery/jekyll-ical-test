exit
events.events
events
events[0][0]
events[0]['event']
events[0][:event]
events[0][:events]
events[0]
events[0][0]
events[0]
events.events
events[0]
events[o]
events[1]
events[2]
events[0]
events
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4].event
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4].summary
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4][1]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4][0]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4].event
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[4]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[3]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[2]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[1]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }[0]
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30).map { |re| re[2] }
events = Icalendar::Event.parse(@raw_feed)[0].occurrences_between(Date.today - 30, Date.today + 30)
events = Icalendar::Event.parse(@raw_feed)[0]..occurrences_between(Date.today - 30, Date.today + 30)
events = Icalendar::Event.parse(@raw_feed)[0]
events = Icalendar::Event.parse(@raw_feed)
recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event[1] }
recurring_events.map { |recurring_event| recurring_event[2] }
exit
recurring_events.map { |recurring_event| recurring_event[2] }[0].schedule
recurring_events.map { |recurring_event| recurring_event[2] }[0]
recurring_events.map { |recurring_event| recurring_event[2] }[0].schedule.event.event
recurring_events.map { |recurring_event| recurring_event[2] }[0].schedule.event
recurring_events.map { |recurring_event| recurring_event[2] }[0].schedule
recurring_events.map { |recurring_event| recurring_event[2] }[0]
recurring_events.map { |recurring_event| recurring_event[2] }[0].summary
recurring_events.map { |recurring_event| recurring_event[2] }[0]
recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event[2] }.schedule
recurring_events.map { |recurring_event| recurring_event[2] }[2]
recurring_events.map { |recurring_event| recurring_event[2] }[0]
recurring_events.map { |recurring_event| recurring_event[2] }[event]
recurring_events.map { |recurring_event| recurring_event[2] }['event']
recurring_events.map { |recurring_event| recurring_event[2] }[:event]
recurring_events.map { |recurring_event| recurring_event[2] }
events = Icalendar::Event.parse(@raw_feed)
recurring_events.map { |recurring_event| recurring_event[2] }[summary]
recurring_events.map { |recurring_event| recurring_event[2] }.summary
recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event[3] }
recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event }
recurring_events.map { |recurring_event| recurring_event[0] }
recurring_events.map { |recurring_event| recurring_event[2] }
events[2]
events[1]
events[0]
events
recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event[2] }.
exit
recurring_events.map { |recurring_event| recurring_event[2] }.
recurring_events.map { |recurring_event| recurring_event[2][0] }
recurring_events.map { |recurring_event| recurring_event[2] }[0]
recurring_events.map { |recurring_event| recurring_event[2] }[1]
recurring_events.map { |recurring_event| recurring_event[2] }[2]
recurring_events.map { |recurring_event| recurring_event[2] }[1]
recurring_events.map { |recurring_event| recurring_event[2] }[0]
recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event[0] }
recurring_events.map { |recurring_event| recurring_event[1] }
recurring_events.map { |recurring_event| recurring_event }[1]
recurring_events.map { |recurring_event| recurring_event }[2]
recurring_events.map { |recurring_event| recurring_event }[0]
recurring_events.map { |recurring_event| recurring_event }
recurring_events.map { |recurring_event| recurring_event[2] }
events[2]
events[0]
events[1]
events[0]
events
re[0]
re[1]
re[0]
re[1]
re[0]
re = recurring_events.map { |recurring_event| recurring_event[2] }
recurring_events.map { |recurring_event| recurring_event[2] }
events[2]
events[3]
events[1]
events
events[0]
events
exit
recurring_events.map{ |revent| revent[2]}
recurring_events.map{ |revent| revent[2] }[2]
recurring_events.map{ |revent| revent[2] }
events[0]
recurring_events.map{ |revent| revent[2].summary }
recurring_events.map{ |revent| revent[2] }
recurring_events
recurring_event
exit
recurrences[0][2]
recurrences[0][1]
recurrences[0][0]
recurrences[0]
recurrences
exit
event
next
event
next
event
exit
event.occurrences_between(Date.today, Date.today + 30) if event.rrule.presence
exit
events[2][2]
events[2][1]
events[2][2]
events[2][0]
events[2]
events[2].second
events[2].first
events[2]
events[2][:event]
events[2].@event
events[2].event
events[2]
events[1]
events
events[2]
exit
events
events[2][0]
events[2].keys
events[2]
events[1]
events[0]
events[4]
events[3]
events[1]
events[0]
events[]
events[2]
events[0]
events
events.map {|event| event.occurrences_between(Date.today, Date.today + 30)}
events.concat(events.map {|event| event.occurrences_between(Date.today, Date.today + 30)}).compact
events.concat(events.map {|event| event.occurrences_between(Date.today, Date.today + 30) if event.rrule.presence})
Icalendar::Event.parse(@raw_feed)
exit
        Icalendar::Event.parse(@raw_feed)[0][:summary]
        Icalendar::Event.parse(@raw_feed)[1].summary
        Icalendar::Event.parse(@raw_feed)[0].summary
        Icalendar::Event.parse(@raw_feed)[0][:summary]
        Icalendar::Event.parse(@raw_feed)[0]
        Icalendar::Event.parse(@raw_feed)
exit
Icalendar::Event.parse(@raw_feed).map {|event| event.occurrences_between(Date.today, Date.today + 30) if event.rrule.presence }.compact
Icalendar::Event.parse(@raw_feed).map {|event| event.occurrences_between(Date.now, Date.today + 30) if event.rrule.presence }.compact
Icalendar::Event.parse(@raw_feed).map {|event| event.summary if event.rrule.presence }.compact
Icalendar::Event.parse(@raw_feed).map {|event| event.summary if event.rrule.presence }.flatten
Icalendar::Event.parse(@raw_feed).map {|event| event.summary if event.rrule.presence }
Icalendar::Event.parse(@raw_feed).map {|event| event.rrule if event.rrule.presence }
Icalendar::Event.parse(@raw_feed).map {|event| event.rrule if event.rrule.present }
Icalendar::Event.parse(@raw_feed).map {|event| event.rrule }
Icalendar::Event.parse(@raw_feed).map {|event| event.summary}
Icalendar::Event.parse(@raw_feed).map {|event| event.summary unless event.rrule}
Icalendar::Event.parse(@raw_feed).map {|event| event unless event.rrule}
Icalendar::Event.parse(@raw_feed).map {|event| event unless event.rrule.nil}
Icalendar::Event.parse(@raw_feed).map {|event| event.rrule}
Icalendar::Event.parse(@raw_feed)[1].rrule
Icalendar::Event.parse(@raw_feed)[1]
Icalendar::Event.parse(@raw_feed)
Icalendar::Event.parse(@raw_feed).second
Icalendar::Event.parse(@raw_feed).first
Icalendar::Event.parse(@raw_feed)
Icalendar::Event.parse(@raw_feed)}
Icalendar::Event.parse(@raw_feed).map {|x| x.rrule[:frequency]}
Icalendar::Event.parse(@raw_feed).map {|x| x.rrule[frequency]}
Icalendar::Event.parse(@raw_feed).map {|x| x.rrule.frequency}
Icalendar::Event.parse(@raw_feed).map {|x| x.rrule["frequency"]}
Icalendar::Event.parse(@raw_feed).map {|x| x.rrule[:frequency]}
Icalendar::Event.parse(@raw_feed).map {|x| x.rrule}
Icalendar::Event.parse(@raw_feed)
exit
Icalendar::Event.parse(@raw_feed)
next
Icalendar::Event.parse(@raw_feed)
Icalendar::Event.parse(@raw_feed).second
Icalendar::Event.parse(@raw_feed).first
exit
Icalendar::Event.parse(@raw_feed).first.rrule
Icalendar::Event.parse(@raw_feed).first
Icalendar::Event.parse(@raw_feed).each {|event| if}
Icalendar::Event.parse(@raw_feed).first.occurrences_between(Date.parse("2014-01-01"), Date.parse("2025-02-01"))
Icalendar::Event.parse(@raw_feed).first
Icalendar::Event.parse(@raw_feed)
Icalendar::Event.parse(@raw_feed).occurrences_between(Date.parse("2014-01-01"), Date.parse("2099-02-01"))
Icalendar::Event.parse(@raw_feed).occurrences_between(Date.parse("2014-01-01"), Date.parse("2099-02-01")
Icalendar::Event.parse(@raw_feed).occurrences_betweenDate.parse("2014-01-01"), Date.parse("2099-02-01")
Icalendar::Event.parse(@raw_feed)
